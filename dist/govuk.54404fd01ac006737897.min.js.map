{"version":3,"file":"govuk.54404fd01ac006737897.min.js","mappings":"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","sources":["webpack://govuk-webpack/./node_modules/govuk-frontend/dist/govuk/common/index.mjs","webpack://govuk-webpack/./node_modules/govuk-frontend/dist/govuk/errors/index.mjs","webpack://govuk-webpack/./node_modules/govuk-frontend/dist/govuk/component.mjs","webpack://govuk-webpack/./node_modules/govuk-frontend/dist/govuk/init.mjs","webpack://govuk-webpack/./node_modules/govuk-frontend/dist/govuk/common/configuration.mjs","webpack://govuk-webpack/./node_modules/govuk-frontend/dist/govuk/components/service-navigation/service-navigation.mjs","webpack://govuk-webpack/./node_modules/govuk-frontend/dist/govuk/components/skip-link/skip-link.mjs","webpack://govuk-webpack/./src/js/main.mjs"],"sourcesContent":["function getBreakpoint(name) {\n  const property = `--govuk-breakpoint-${name}`;\n  const value = window.getComputedStyle(document.documentElement).getPropertyValue(property);\n  return {\n    property,\n    value: value || undefined\n  };\n}\nfunction setFocus($element, options = {}) {\n  var _options$onBeforeFocu;\n  const isFocusable = $element.getAttribute('tabindex');\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1');\n  }\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, {\n      once: true\n    });\n  }\n  function onBlur() {\n    var _options$onBlur;\n    (_options$onBlur = options.onBlur) == null || _options$onBlur.call($element);\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex');\n    }\n  }\n  $element.addEventListener('focus', onFocus, {\n    once: true\n  });\n  (_options$onBeforeFocu = options.onBeforeFocus) == null || _options$onBeforeFocu.call($element);\n  $element.focus();\n}\nfunction isInitialised($root, moduleName) {\n  return $root instanceof HTMLElement && $root.hasAttribute(`data-${moduleName}-init`);\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @param {HTMLElement | null} [$scope] - (internal) `<body>` HTML element checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nfunction isSupported($scope = document.body) {\n  if (!$scope) {\n    return false;\n  }\n  return $scope.classList.contains('govuk-frontend-supported');\n}\nfunction isArray(option) {\n  return Array.isArray(option);\n}\nfunction isObject(option) {\n  return !!option && typeof option === 'object' && !isArray(option);\n}\nfunction isScope($scope) {\n  return !!$scope && ($scope instanceof Element || $scope instanceof Document);\n}\nfunction formatErrorMessage(Component, message) {\n  return `${Component.moduleName}: ${message}`;\n}\n/**\n * @typedef ComponentWithModuleName\n * @property {string} moduleName - Name of the component\n */\n\nexport { formatErrorMessage, getBreakpoint, isInitialised, isObject, isScope, isSupported, setFocus };\n//# sourceMappingURL=index.mjs.map\n","import { isObject, formatErrorMessage } from '../common/index.mjs';\n\nclass GOVUKFrontendError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.name = 'GOVUKFrontendError';\n  }\n}\nclass SupportError extends GOVUKFrontendError {\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage = 'noModule' in HTMLScriptElement.prototype ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet' : 'GOV.UK Frontend is not supported in this browser';\n    super($scope ? supportMessage : 'GOV.UK Frontend initialised without `<script type=\"module\">`');\n    this.name = 'SupportError';\n  }\n}\nclass ConfigError extends GOVUKFrontendError {\n  constructor(...args) {\n    super(...args);\n    this.name = 'ConfigError';\n  }\n}\nclass ElementError extends GOVUKFrontendError {\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : '';\n    if (isObject(messageOrOptions)) {\n      const {\n        component,\n        identifier,\n        element,\n        expectedType\n      } = messageOrOptions;\n      message = identifier;\n      message += element ? ` is not of type ${expectedType != null ? expectedType : 'HTMLElement'}` : ' not found';\n      if (component) {\n        message = formatErrorMessage(component, message);\n      }\n    }\n    super(message);\n    this.name = 'ElementError';\n  }\n}\nclass InitError extends GOVUKFrontendError {\n  constructor(componentOrMessage) {\n    const message = typeof componentOrMessage === 'string' ? componentOrMessage : formatErrorMessage(componentOrMessage, `Root element (\\`$root\\`) already initialised`);\n    super(message);\n    this.name = 'InitError';\n  }\n}\n/**\n * @import { ComponentWithModuleName } from '../common/index.mjs'\n */\n\nexport { ConfigError, ElementError, GOVUKFrontendError, InitError, SupportError };\n//# sourceMappingURL=index.mjs.map\n","import { isInitialised, isSupported } from './common/index.mjs';\nimport { InitError, ElementError, SupportError } from './errors/index.mjs';\n\nclass Component {\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {RootElementType} - the root element of component\n   */\n  get $root() {\n    return this._$root;\n  }\n  constructor($root) {\n    this._$root = void 0;\n    const childConstructor = this.constructor;\n    if (typeof childConstructor.moduleName !== 'string') {\n      throw new InitError(`\\`moduleName\\` not defined in component`);\n    }\n    if (!($root instanceof childConstructor.elementType)) {\n      throw new ElementError({\n        element: $root,\n        component: childConstructor,\n        identifier: 'Root element (`$root`)',\n        expectedType: childConstructor.elementType.name\n      });\n    } else {\n      this._$root = $root;\n    }\n    childConstructor.checkSupport();\n    this.checkInitialised();\n    const moduleName = childConstructor.moduleName;\n    this.$root.setAttribute(`data-${moduleName}-init`, '');\n  }\n  checkInitialised() {\n    const constructor = this.constructor;\n    const moduleName = constructor.moduleName;\n    if (moduleName && isInitialised(this.$root, moduleName)) {\n      throw new InitError(constructor);\n    }\n  }\n  static checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError();\n    }\n  }\n}\n\n/**\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n */\n\n/**\n * @typedef {typeof Component & ChildClass} ChildClassConstructor\n */\nComponent.elementType = HTMLElement;\n\nexport { Component };\n//# sourceMappingURL=component.mjs.map\n","import { normaliseOptions } from './common/configuration.mjs';\nimport { isSupported, isObject } from './common/index.mjs';\nimport { Accordion } from './components/accordion/accordion.mjs';\nimport { Button } from './components/button/button.mjs';\nimport { CharacterCount } from './components/character-count/character-count.mjs';\nimport { Checkboxes } from './components/checkboxes/checkboxes.mjs';\nimport { ErrorSummary } from './components/error-summary/error-summary.mjs';\nimport { ExitThisPage } from './components/exit-this-page/exit-this-page.mjs';\nimport { FileUpload } from './components/file-upload/file-upload.mjs';\nimport { Header } from './components/header/header.mjs';\nimport { NotificationBanner } from './components/notification-banner/notification-banner.mjs';\nimport { PasswordInput } from './components/password-input/password-input.mjs';\nimport { Radios } from './components/radios/radios.mjs';\nimport { ServiceNavigation } from './components/service-navigation/service-navigation.mjs';\nimport { SkipLink } from './components/skip-link/skip-link.mjs';\nimport { Tabs } from './components/tabs/tabs.mjs';\nimport { SupportError, ElementError } from './errors/index.mjs';\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find, instantiate and init all of the\n * components provided as part of GOV.UK Frontend.\n *\n * @param {Config | Element | Document | null} [scopeOrConfig] - Scope of the document to search within or config for all components (with optional scope)\n */\nfunction initAll(scopeOrConfig = {}) {\n  const config = isObject(scopeOrConfig) ? scopeOrConfig : {};\n  const options = normaliseOptions(scopeOrConfig);\n  try {\n    if (!isSupported()) {\n      throw new SupportError();\n    }\n    if (options.scope === null) {\n      throw new ElementError({\n        element: options.scope,\n        identifier: 'GOV.UK Frontend scope element (`$scope`)'\n      });\n    }\n  } catch (error) {\n    if (options.onError) {\n      options.onError(error, {\n        config\n      });\n    } else {\n      console.log(error);\n    }\n    return;\n  }\n  const components = [[Accordion, config.accordion], [Button, config.button], [CharacterCount, config.characterCount], [Checkboxes], [ErrorSummary, config.errorSummary], [ExitThisPage, config.exitThisPage], [FileUpload, config.fileUpload], [Header], [NotificationBanner, config.notificationBanner], [PasswordInput, config.passwordInput], [Radios], [ServiceNavigation], [SkipLink], [Tabs]];\n  components.forEach(([Component, componentConfig]) => {\n    createAll(Component, componentConfig, options);\n  });\n}\n\n/**\n * Create all instances of a specific component on the page\n *\n * Uses the `data-module` attribute to find all elements matching the specified\n * component on the page, creating instances of the component object for each\n * of them.\n *\n * Any component errors will be caught and logged to the console.\n *\n * @template {CompatibleClass} ComponentClass\n * @param {ComponentClass} Component - class of the component to create\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {OnErrorCallback<ComponentClass> | Element | Document | null | CreateAllOptions<ComponentClass>} [scopeOrOptions] - options for createAll including scope of the document to search within and callback function if error throw by component on init\n * @returns {Array<InstanceType<ComponentClass>>} - array of instantiated components\n */\nfunction createAll(Component, config, scopeOrOptions) {\n  let $elements;\n  const options = normaliseOptions(scopeOrOptions);\n  try {\n    var _options$scope;\n    if (!isSupported()) {\n      throw new SupportError();\n    }\n    if (options.scope === null) {\n      throw new ElementError({\n        element: options.scope,\n        component: Component,\n        identifier: 'Scope element (`$scope`)'\n      });\n    }\n    $elements = (_options$scope = options.scope) == null ? void 0 : _options$scope.querySelectorAll(`[data-module=\"${Component.moduleName}\"]`);\n  } catch (error) {\n    if (options.onError) {\n      options.onError(error, {\n        component: Component,\n        config\n      });\n    } else {\n      console.log(error);\n    }\n    return [];\n  }\n  return Array.from($elements != null ? $elements : []).map($element => {\n    try {\n      return typeof config !== 'undefined' ? new Component($element, config) : new Component($element);\n    } catch (error) {\n      if (options.onError) {\n        options.onError(error, {\n          element: $element,\n          component: Component,\n          config\n        });\n      } else {\n        console.log(error);\n      }\n      return null;\n    }\n  }).filter(Boolean);\n}\n/**\n * @typedef {{new (...args: any[]): any, moduleName: string}} CompatibleClass\n */\n/**\n * Config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n * @property {OnErrorCallback<CompatibleClass>} [onError] - Initialisation error callback\n * @property {AccordionConfig} [accordion] - Accordion config\n * @property {ButtonConfig} [button] - Button config\n * @property {CharacterCountConfig} [characterCount] - Character Count config\n * @property {ErrorSummaryConfig} [errorSummary] - Error Summary config\n * @property {ExitThisPageConfig} [exitThisPage] - Exit This Page config\n * @property {FileUploadConfig} [fileUpload] - File Upload config\n * @property {NotificationBannerConfig} [notificationBanner] - Notification Banner config\n * @property {PasswordInputConfig} [passwordInput] - Password input config\n */\n/**\n * Config for individual components\n *\n * @import { AccordionConfig } from './components/accordion/accordion.mjs'\n * @import { ButtonConfig } from './components/button/button.mjs'\n * @import { CharacterCountConfig } from './components/character-count/character-count.mjs'\n * @import { ErrorSummaryConfig } from './components/error-summary/error-summary.mjs'\n * @import { ExitThisPageConfig } from './components/exit-this-page/exit-this-page.mjs'\n * @import { NotificationBannerConfig } from './components/notification-banner/notification-banner.mjs'\n * @import { PasswordInputConfig } from './components/password-input/password-input.mjs'\n * @import { FileUploadConfig } from './components/file-upload/file-upload.mjs'\n */\n/**\n * Component config keys, e.g. `accordion` and `characterCount`\n *\n * @typedef {keyof Omit<Config, 'scope' | 'onError'>} ConfigKey\n */\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {ConstructorParameters<ComponentClass>[1]} ComponentConfig\n */\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} ErrorContext\n * @property {Element} [element] - Element used for component module initialisation\n * @property {ComponentClass} [component] - Class of component\n * @property {Config | ComponentConfig<ComponentClass>} [config] - Config supplied to components\n */\n/**\n * @template {CompatibleClass} ComponentClass\n * @callback OnErrorCallback\n * @param {unknown} error - Thrown error\n * @param {ErrorContext<ComponentClass>} context - Object containing the element, component class and configuration\n */\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} CreateAllOptions\n * @property {Element | Document | null} [scope] - scope of the document to search within\n * @property {OnErrorCallback<ComponentClass>} [onError] - callback function if error throw by component on init\n */\n\nexport { createAll, initAll };\n//# sourceMappingURL=init.mjs.map\n","import { Component } from '../component.mjs';\nimport { ConfigError } from '../errors/index.mjs';\nimport { isObject, formatErrorMessage, isScope } from './index.mjs';\n\nconst configOverride = Symbol.for('configOverride');\nclass ConfigurableComponent extends Component {\n  [configOverride](param) {\n    return {};\n  }\n\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {ConfigurationType} - the root element of component\n   */\n  get config() {\n    return this._config;\n  }\n  constructor($root, config) {\n    super($root);\n    this._config = void 0;\n    const childConstructor = this.constructor;\n    if (!isObject(childConstructor.defaults)) {\n      throw new ConfigError(formatErrorMessage(childConstructor, 'Config passed as parameter into constructor but no defaults defined'));\n    }\n    const datasetConfig = normaliseDataset(childConstructor, this._$root.dataset);\n    this._config = mergeConfigs(childConstructor.defaults, config != null ? config : {}, this[configOverride](datasetConfig), datasetConfig);\n  }\n}\nfunction normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : '';\n  let output;\n  let outputType = property == null ? void 0 : property.type;\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean';\n    }\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number';\n    }\n  }\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true';\n      break;\n    case 'number':\n      output = Number(trimmedValue);\n      break;\n    default:\n      output = value;\n  }\n  return output;\n}\nfunction normaliseDataset(Component, dataset) {\n  if (!isObject(Component.schema)) {\n    throw new ConfigError(formatErrorMessage(Component, 'Config passed as parameter into constructor but no schema defined'));\n  }\n  const out = {};\n  const entries = Object.entries(Component.schema.properties);\n  for (const entry of entries) {\n    const [namespace, property] = entry;\n    const field = namespace.toString();\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property);\n    }\n    if ((property == null ? void 0 : property.type) === 'object') {\n      out[field] = extractConfigByNamespace(Component.schema, dataset, namespace);\n    }\n  }\n  return out;\n}\nfunction normaliseOptions(scopeOrOptions) {\n  let $scope = document;\n  let onError;\n  if (isObject(scopeOrOptions)) {\n    const options = scopeOrOptions;\n    if (isScope(options.scope) || options.scope === null) {\n      $scope = options.scope;\n    }\n    if (typeof options.onError === 'function') {\n      onError = options.onError;\n    }\n  }\n  if (isScope(scopeOrOptions)) {\n    $scope = scopeOrOptions;\n  } else if (scopeOrOptions === null) {\n    $scope = null;\n  } else if (typeof scopeOrOptions === 'function') {\n    onError = scopeOrOptions;\n  }\n  return {\n    scope: $scope,\n    onError\n  };\n}\nfunction mergeConfigs(...configObjects) {\n  const formattedConfigObject = {};\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key];\n      const override = configObject[key];\n      if (isObject(option) && isObject(override)) {\n        formattedConfigObject[key] = mergeConfigs(option, override);\n      } else {\n        formattedConfigObject[key] = override;\n      }\n    }\n  }\n  return formattedConfigObject;\n}\nfunction validateConfig(schema, config) {\n  const validationErrors = [];\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = [];\n    if (Array.isArray(conditions)) {\n      for (const {\n        required,\n        errorMessage\n      } of conditions) {\n        if (!required.every(key => !!config[key])) {\n          errors.push(errorMessage);\n        }\n      }\n      if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n        validationErrors.push(...errors);\n      }\n    }\n  }\n  return validationErrors;\n}\nfunction extractConfigByNamespace(schema, dataset, namespace) {\n  const property = schema.properties[namespace];\n  if ((property == null ? void 0 : property.type) !== 'object') {\n    return;\n  }\n  const newObject = {\n    [namespace]: {}\n  };\n  for (const [key, value] of Object.entries(dataset)) {\n    let current = newObject;\n    const keyParts = key.split('.');\n    for (const [index, name] of keyParts.entries()) {\n      if (isObject(current)) {\n        if (index < keyParts.length - 1) {\n          if (!isObject(current[name])) {\n            current[name] = {};\n          }\n          current = current[name];\n        } else if (key !== namespace) {\n          current[name] = normaliseString(value);\n        }\n      }\n    }\n  }\n  return newObject[namespace];\n}\n/**\n * Schema for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} Schema\n * @property {Record<keyof ConfigurationType, SchemaProperty | undefined>} properties - Schema properties\n * @property {SchemaCondition<ConfigurationType>[]} [anyOf] - List of schema conditions\n */\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n/**\n * Schema condition for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} SchemaCondition\n * @property {(keyof ConfigurationType)[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n * @property {Schema<ConfigurationType>} [schema] - The schema of the component configuration\n * @property {ConfigurationType} [defaults] - The default values of the configuration of the component\n */\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef {typeof Component & ChildClass<ConfigurationType>} ChildClassConstructor<ConfigurationType>\n */\n/**\n * @import { CompatibleClass, Config, CreateAllOptions, OnErrorCallback } from '../init.mjs'\n */\n\nexport { ConfigurableComponent, configOverride, extractConfigByNamespace, mergeConfigs, normaliseDataset, normaliseOptions, normaliseString, validateConfig };\n//# sourceMappingURL=configuration.mjs.map\n","import { getBreakpoint } from '../../common/index.mjs';\nimport { Component } from '../../component.mjs';\nimport { ElementError } from '../../errors/index.mjs';\n\n/**\n * Service Navigation component\n *\n * @preserve\n */\nclass ServiceNavigation extends Component {\n  /**\n   * @param {Element | null} $root - HTML element to use for header\n   */\n  constructor($root) {\n    super($root);\n    this.$menuButton = void 0;\n    this.$menu = void 0;\n    this.menuIsOpen = false;\n    this.mql = null;\n    const $menuButton = this.$root.querySelector('.govuk-js-service-navigation-toggle');\n    if (!$menuButton) {\n      return this;\n    }\n    const menuId = $menuButton.getAttribute('aria-controls');\n    if (!menuId) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        identifier: 'Navigation button (`<button class=\"govuk-js-service-navigation-toggle\">`) attribute (`aria-controls`)'\n      });\n    }\n    const $menu = document.getElementById(menuId);\n    if (!$menu) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      });\n    }\n    this.$menu = $menu;\n    this.$menuButton = $menuButton;\n    this.setupResponsiveChecks();\n    this.$menuButton.addEventListener('click', () => this.handleMenuButtonClick());\n  }\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet');\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      });\n    }\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`);\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode());\n    } else {\n      this.mql.addListener(() => this.checkMode());\n    }\n    this.checkMode();\n  }\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return;\n    }\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden');\n      this.$menuButton.setAttribute('hidden', '');\n    } else {\n      this.$menuButton.removeAttribute('hidden');\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString());\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden');\n      } else {\n        this.$menu.setAttribute('hidden', '');\n      }\n    }\n  }\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen;\n    this.checkMode();\n  }\n}\nServiceNavigation.moduleName = 'govuk-service-navigation';\n\nexport { ServiceNavigation };\n//# sourceMappingURL=service-navigation.mjs.map\n","import { setFocus } from '../../common/index.mjs';\nimport { Component } from '../../component.mjs';\nimport { ElementError } from '../../errors/index.mjs';\n\n/**\n * Skip link component\n *\n * @preserve\n * @augments Component<HTMLAnchorElement>\n */\nclass SkipLink extends Component {\n  /**\n   * @param {Element | null} $root - HTML element to use for skip link\n   * @throws {ElementError} when $root is not set or the wrong type\n   * @throws {ElementError} when $root.hash does not contain a hash\n   * @throws {ElementError} when the linked element is missing or the wrong type\n   */\n  constructor($root) {\n    var _this$$root$getAttrib;\n    super($root);\n    const hash = this.$root.hash;\n    const href = (_this$$root$getAttrib = this.$root.getAttribute('href')) != null ? _this$$root$getAttrib : '';\n    if (this.$root.origin !== window.location.origin || this.$root.pathname !== window.location.pathname) {\n      return;\n    }\n    const linkedElementId = hash.replace('#', '');\n    if (!linkedElementId) {\n      throw new ElementError(`Skip link: Target link (\\`href=\"${href}\"\\`) has no hash fragment`);\n    }\n    const $linkedElement = document.getElementById(linkedElementId);\n    if (!$linkedElement) {\n      throw new ElementError({\n        component: SkipLink,\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      });\n    }\n    this.$root.addEventListener('click', () => setFocus($linkedElement, {\n      onBeforeFocus() {\n        $linkedElement.classList.add('govuk-skip-link-focused-element');\n      },\n      onBlur() {\n        $linkedElement.classList.remove('govuk-skip-link-focused-element');\n      }\n    }));\n  }\n}\nSkipLink.elementType = HTMLAnchorElement;\nSkipLink.moduleName = 'govuk-skip-link';\n\nexport { SkipLink };\n//# sourceMappingURL=skip-link.mjs.map\n","import {\n  createAll,\n  //   Accordion,\n  //   Button,\n  //   CharacterCount,\n  //   Checkboxes,\n  //   ErrorSummary,\n  //   ExitThisPage,\n  //   FileUpload,\n  //   Header,\n  //   NotificationBanner,\n  //   PasswordInput,\n  //   Radios,\n  ServiceNavigation,\n  SkipLink,\n  //   Tabs,\n} from \"govuk-frontend\";\n\n// createAll(Accordion);\n// createAll(Button);\n// createAll(CharacterCount);\n// createAll(Checkboxes);\n// createAll(ErrorSummary);\n// createAll(ExitThisPage);\n// createAll(FileUpload);\n// createAll(Header);\n// createAll(NotificationBanner);\n// createAll(PasswordInput);\n// createAll(Radios);\ncreateAll(ServiceNavigation);\ncreateAll(SkipLink);\n// createAll(Tabs);\n"],"names":["$scope","document","body","classList","contains","option","Array","isArray","isScope","Element","Document","formatErrorMessage","Component","message","moduleName","GOVUKFrontendError","Error","constructor","args","super","this","name","supportMessage","HTMLScriptElement","prototype","messageOrOptions","component","identifier","element","expectedType","InitError","componentOrMessage","$root","_$root","childConstructor","elementType","checkSupport","checkInitialised","setAttribute","HTMLElement","hasAttribute","isInitialised","createAll","config","scopeOrOptions","$elements","options","onError","scope","_options$scope","querySelectorAll","error","console","log","from","map","$element","filter","Boolean","Symbol","for","$menuButton","$menu","menuIsOpen","mql","querySelector","menuId","getAttribute","getElementById","setupResponsiveChecks","addEventListener","handleMenuButtonClick","breakpoint","property","value","window","getComputedStyle","documentElement","getPropertyValue","undefined","getBreakpoint","matchMedia","checkMode","addListener","matches","removeAttribute","toString","_this$$root$getAttrib","hash","href","origin","location","pathname","linkedElementId","replace","$linkedElement","_options$onBeforeFocu","isFocusable","onBlur","_options$onBlur","call","once","onBeforeFocus","focus","setFocus","add","remove","HTMLAnchorElement","ServiceNavigation","SkipLink"],"sourceRoot":""}